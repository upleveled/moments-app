import { useState, useEffect } from 'react';
import { firebaseClient } from 'lib';

import {
	removeUserCookie,
	setUserCookie,
	getUserFromCookie,
} from 'lib/user-cookies';
import { User } from 'interfaces';

export const useFirebaseUser = () =>
	// setToken: (value: string | null) => void,
	// setInitializing: (value: boolean) => void
	{
		const [finalUser, setFinalUser] = useState(getUserFromCookie());

		useEffect(() => {
			const cancelAuthListener = firebaseClient
				.auth()
				.onIdTokenChanged(async (user) => {
					console.log('running firebase auth');
					// If user
					if (user && user.email) {
						console.log('there is a user');
						const userData: User = {
							email: user.email,
							uid: user.uid,
							token: '',
						};
						// Get the firebase token from the user.
						const token = await user.getIdToken();
						const idTokenResult = await user.getIdTokenResult();

						// Get the hasura custom claims from the firebase token.
						const hasuraClaim =
							idTokenResult.claims['https://hasura.io/jwt/claims'];

						// Check if the firebase user already have the hasura custom claims.
						if (hasuraClaim) {
							console.log('has hasura claims :P');
							// Set the user.
							userData.token = token;

							setFinalUser({
								...userData,
							});

							// Set current token
							// setToken(token);

							// // Set first time variable to true to show de onboarding
							// isFirstTimeVar(false);

							// Set initializing to false
							// setInitializing(false);

							// Create the user session in the backend.
							setUserCookie(userData);
						} else {
							console.log('does not has hasura claims :(');
							// Update de token in firebase to add Hasura claims.
							await fetch('/api/process-signup', {
								method: 'POST',
								body: JSON.stringify({
									userId: userData.uid,
								}),
							});

							// Force refresh to pick up the latest custom claims changes.
							const newToken = await user.getIdToken(true);

							// refresh the token in the session backend
							userData.token = newToken;
							setUserCookie(userData);

							// Generate a random number to use in the username.
							// const randomNumber = Math.floor(1000 + Math.random() * 9000);
							// Get the section of the email before the @ to use in the username.
							// const userNameFromEmail = user.email?.split('@')[0].replace('.', '');
							// Create the autogenerated username.
							// userData.username = `${userNameFromEmail}${randomNumber}`;

							// Set the user
							setFinalUser({
								...userData,
							});

							// Set current token
							// setToken(newToken);

							// Set first time variable to true to show de onboarding
							// isFirstTimeVar(true);

							// Insert the user in the DB.
							fetch('/api/create-user-db', {
								method: 'POST',
								body: JSON.stringify({
									id: userData.uid,
									email: userData.email,
									username: userData.email,
								}),
							});

							// Add user to the newsletter
							// fetch('/api/add-user-newsletter', {
							// 	method: 'POST',
							// 	body: JSON.stringify({
							// 		email: userData.email,
							// 	}),
							// });
						}
					} else {
						console.log('there is no user :(');
						// Set the user to null
						setFinalUser(null);
						// Set the current token to null
						// setToken(null);
						// Set initializing to false
						// setInitializing(false);
						// call log out on the backend to delete the session
						removeUserCookie();
					}
				});

			const userFromCookie = getUserFromCookie();

			setFinalUser(userFromCookie);

			return () => {
				cancelAuthListener();
			};
		}, []);

		return finalUser;
	};
